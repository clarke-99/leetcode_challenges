class Solution(object):
    def numberToWords(self, num):
        """
        :type num: int
        :rtype: str
        """
        def reverse_integer(n):
            reversed_n = 0
    
            while n != 0:
                digit = n % 10
                reversed_n = reversed_n * 10 + digit
                n //= 10
    
            return reversed_n
        
        nums = {0: ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'], 1:['', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'], 2: ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']}
        suffix = ['Hundred', 'Thousand', 'Million', 'Billion']

        sNum = str(num)
        l = len(sNum)
        count = l
        word = []
        # 0 1 2    3 4 5    6 7 8    9
        # d t h sf d t h sf d t h billion

        i = 0
        for i, x in enumerate(sNum):
            x = int(x)
            if count in (1, 4, 7, 10):
                try:
                    next_digit = int(sNum[i+1])
                except IndexError:
                    next_digit = None
                if x!=1 or (x == 1 and next_digit ==0):
                    word.append(nums[2][x])
                else:
                    word.append(nums[1][next_digit])
            elif count % 3 == 0 and count !=0:
                sf = count/3
                word.append(suffix[sf])
            count -= 1

        return word

        
s = Solution()
print(s.numberToWords(10))